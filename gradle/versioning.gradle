if (buildTypes.promotionBuild.active) {
    logger.lifecycle "Invocation tasks: $gradle.startParameter.taskNames\nInvocation properties: $gradle.startParameter.projectProperties"
}

ext.milestoneNumber = project.hasProperty("milestoneNumber") ? project.milestoneNumber.toInteger() : null
ext.rcNumber = project.hasProperty("rcNumber") ? project.rcNumber.toInteger() : null
ext.finalRelease = project.hasProperty("finalRelease")
if ((milestoneNumber != null && rcNumber != null) ||
        (rcNumber != null && finalRelease) ||
        (milestoneNumber != null && finalRelease)) {
    throw new InvalidUserDataException("Cannot set any combination of milestoneNumber, rcNumber and finalRelease at the same time")
}

if (incomingDistributionsBuildReceipt) {
    ext.versionBase = incomingDistributionsBuildReceipt.versionBase
    ext.buildTimestamp = incomingDistributionsBuildReceipt.buildTimestamp
} else {
    ext.versionBase = rootProject.file("version.txt").text.trim()

    def timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmssZ')
    timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
    Date buildTime
    if (project.hasProperty("buildTimestamp")) {
        buildTime = timestampFormat.parse(buildTimestamp)
    } else {
        File timestampFile = file("$buildDir/timestamp.txt")
        if (timestampFile.isFile()) {
            boolean uptodate = true
            def modified = timestampFile.lastModified()
            project(':core').fileTree('src/main').visit {fte ->
                if (fte.file.isFile() && fte.lastModified > modified) {
                    uptodate = false
                    fte.stopVisiting()
                }
            }
            if (!uptodate) {
                timestampFile.setLastModified(new Date().time)
            }
        } else {
            timestampFile.parentFile.mkdirs()
            timestampFile.createNewFile()
        }

        buildTime = new Date(timestampFile.lastModified())
    }
    ext.buildTimestamp = timestampFormat.format(buildTime)
}

version = versionBase

ext.isSnapshot = false
if (finalRelease) {
    // use version base
} else if (rcNumber != null) {
    version += "-rc-$rcNumber"
} else if (milestoneNumber != null) {
    version += "-milestone-$milestoneNumber"
} else {
    isSnapshot = true
    version += "-$buildTimestamp"
}

ext.testedVersion = isSnapshot ? "${versionBase}-snapshot-1" : version

if (buildTypes.promotionBuild.active) {
    logger.lifecycle "Version: $version (version base: $versionBase, timestamp: $buildTimestamp, snapshot: $isSnapshot, tested version: $testedVersion)"
}
